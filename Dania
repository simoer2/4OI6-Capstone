#include <Wire.h>
#include <Adafruit_VL53L0X.h> // Use Adafruit's library for VL53L0X
// For VL53L1X, use: #include <PololuVL53L1X.h>

#define NUM_SENSORS 6

// Sensor and motor pin arrays
Adafruit_VL53L0X sensors[NUM_SENSORS]; // Use PololuVL53L1X sensors[NUM_SENSORS] for VL53L1X
const int xshutPins[NUM_SENSORS] = {2, 3, 4, 5, 6, 7}; // XSHUT pins for each sensor
const int motorPins[NUM_SENSORS] = {8, 9, 10, 11, 12, 13}; // PWM pins for each motor

void setup() {
  Serial.begin(9600);

  // Initialize motors as outputs
  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(motorPins[i], OUTPUT);
    digitalWrite(motorPins[i], LOW); // Ensure motors are off initially
  }

  // Initialize I2C
  Wire.begin();

  // Initialize each sensor
  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(xshutPins[i], OUTPUT);
    digitalWrite(xshutPins[i], LOW); // Turn off the sensor
  }

  delay(100);

  for (int i = 0; i < NUM_SENSORS; i++) {
    digitalWrite(xshutPins[i], HIGH); // Turn on this sensor
    delay(10);

    if (!sensors[i].begin()) { // For VL53L1X, use sensors[i].init()
      Serial.print("Failed to initialize sensor ");
      Serial.println(i);
      while (1);
    }

    // Assign a unique I2C address
    sensors[i].setAddress(0x30 + i); // For VL53L1X, use sensors[i].setAddress()
  }

  Serial.println("All sensors initialized!");
}

void loop() {
  for (int i = 0; i < NUM_SENSORS; i++) {
    VL53L0X_RangingMeasurementData_t measure;
    sensors[i].rangingTest(&measure, false); // For VL53L1X, use sensors[i].read()

    if (measure.RangeStatus != 4) { // Status 4 = out of range
      Serial.print("Sensor ");
      Serial.print(i);
      Serial.print(": ");
      Serial.print(measure.RangeMilliMeter);
      Serial.println(" mm");

      // Trigger motor if within 50 cm
      if (measure.RangeMilliMeter <= 500) {
        analogWrite(motorPins[i], 255); // Full vibration intensity
      } else {
        analogWrite(motorPins[i], 0); // Turn off motor
      }
    } else {
      // Sensor out of range, turn off motor
      digitalWrite(motorPins[i], LOW);
    }
  }

  delay(100); // Small delay for smoother operation
}

